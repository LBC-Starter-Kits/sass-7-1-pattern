// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

@use 'sass:list';

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Kitty Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}


// Media queries

@mixin mq($width, $type: min) {
  @if map_has_key($mq_breakpoints, $width) {
      $width: map_get($mq_breakpoints, $width);
      @if $type == max {
          $width: $width - 1px;
      }
      @media only screen and (#{$type}-width: $width) {
          @content;
      }
  }
}

// Tipograf√≠a

@mixin typo($size, $scale: 'perfect-fourth'){
  @if map-has-key($map: $typo-scales, $key: $scale ){
    $scale: map-get($map: $typo-scales, $key: $scale)
  }
  @else{
    $scale: $perfect-fourth;
  }


  @if map-has-key($map: $scale, $key: $size) {
    font-size: map-get($scale, $size);
  }
}


/*
Uso: 

// $color-primary: #3e60be;
// $color-secondary: #23ded2;
// $color-accent: #e5389b;
// $color-neutral-light: #efefef;
// $color-neutral-dark: #323232;

// $simple-gradient: $color-primary, $color-secondary;
// $complex-gradient: $color-primary, $color-secondary, $color-accent;

// $scheme-default: $color-neutral-light, $color-primary;
// $scheme-secondary: $color-neutral-dark, $color-secondary;
// $scheme-accent-gradient: $color-neutral-dark, $complex-gradient;
// $scheme-simple-gradient: $color-neutral-dark, $simple-gradient;


@include color-scheme(yellow,black);
@include color-scheme($scheme-default...);
@include color-scheme($scheme-accent-gradient...);
@include color-scheme($scheme-simple-gradient...);
@include color-scheme(black, (white, black, yellow));

*/

// Colores 

@mixin color-scheme($texto, $bg){
  @if list.length($bg) == 1{
    background-color: $bg;
  }
  @else{
    background-image: linear-gradient(to top left, $bg);
  }
  color: $texto;
}

@mixin color-variables($color, $label) {
  
  @for $i from 4 to 1 {
    $shadow: adjust-color($color, $lightness: -$i * 10%);
    --color-#{$label}-#{500 - ($i * 100)}: #{$shadow};
  }
  
  --color-#{$label}-500: #{$color};

  @for $i from 4 to 1 {
    $tint: adjust-color($color, $lightness: $i * 10%);
    --color-#{$label}-#{500 + ($i * 100)}: #{$tint};
  }
}

// Efectos

@mixin full-bleed($color){
  background-color: $color;
  box-shadow: 0 0 0 100vmax $color;
  clip-path: inset(0 -100vmax);
}


@mixin glassmorphism($color: #ffffff, $alpha: 0.2, $outline-alpha:0.3, $blur:5px ){
  background: rgba($color, $alpha);
  // border-radius: 16px;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
  border: 1px solid rgba($color, $outline-alpha);
}


@mixin color-shadow($angle: -45deg, $color1:#0000ff, $color2: #ff0000) {
  position: relative;

  &:before{
    position: absolute;
    z-index: -1;
    content:"";
    inset: 0;
    background: linear-gradient($angle, $color1 0%, $color2 100%);
    filter: blur(20px);
    transform: translate3d(0px, 20px, 0px);
  }
}